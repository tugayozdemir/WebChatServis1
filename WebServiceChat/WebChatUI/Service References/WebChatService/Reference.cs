//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebChatUI.WebChatService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="User", Namespace="http://schemas.datacontract.org/2004/07/WebChatService.Model")]
    [System.SerializableAttribute()]
    public partial class User : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserName {
            get {
                return this.UserNameField;
            }
            set {
                if ((object.ReferenceEquals(this.UserNameField, value) != true)) {
                    this.UserNameField = value;
                    this.RaisePropertyChanged("UserName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Room", Namespace="http://schemas.datacontract.org/2004/07/WebChatService.Model")]
    [System.SerializableAttribute()]
    public partial class Room : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private WebChatUI.WebChatService.User[] UsersField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public WebChatUI.WebChatService.User[] Users {
            get {
                return this.UsersField;
            }
            set {
                if ((object.ReferenceEquals(this.UsersField, value) != true)) {
                    this.UsersField = value;
                    this.RaisePropertyChanged("Users");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Message", Namespace="http://schemas.datacontract.org/2004/07/WebChatService.Model")]
    [System.SerializableAttribute()]
    public partial class Message : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private WebChatUI.WebChatService.User FromField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime SendDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TextField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private WebChatUI.WebChatService.User ToField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public WebChatUI.WebChatService.User From {
            get {
                return this.FromField;
            }
            set {
                if ((object.ReferenceEquals(this.FromField, value) != true)) {
                    this.FromField = value;
                    this.RaisePropertyChanged("From");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime SendDate {
            get {
                return this.SendDateField;
            }
            set {
                if ((this.SendDateField.Equals(value) != true)) {
                    this.SendDateField = value;
                    this.RaisePropertyChanged("SendDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Text {
            get {
                return this.TextField;
            }
            set {
                if ((object.ReferenceEquals(this.TextField, value) != true)) {
                    this.TextField = value;
                    this.RaisePropertyChanged("Text");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public WebChatUI.WebChatService.User To {
            get {
                return this.ToField;
            }
            set {
                if ((object.ReferenceEquals(this.ToField, value) != true)) {
                    this.ToField = value;
                    this.RaisePropertyChanged("To");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="WebChatService.IChatService")]
    public interface IChatService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/Login", ReplyAction="http://tempuri.org/IChatService/LoginResponse")]
        WebChatUI.WebChatService.User Login(WebChatUI.WebChatService.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/Login", ReplyAction="http://tempuri.org/IChatService/LoginResponse")]
        System.Threading.Tasks.Task<WebChatUI.WebChatService.User> LoginAsync(WebChatUI.WebChatService.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/CreateRoom", ReplyAction="http://tempuri.org/IChatService/CreateRoomResponse")]
        WebChatUI.WebChatService.Room CreateRoom(WebChatUI.WebChatService.Room room);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/CreateRoom", ReplyAction="http://tempuri.org/IChatService/CreateRoomResponse")]
        System.Threading.Tasks.Task<WebChatUI.WebChatService.Room> CreateRoomAsync(WebChatUI.WebChatService.Room room);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/GetRoomList", ReplyAction="http://tempuri.org/IChatService/GetRoomListResponse")]
        WebChatUI.WebChatService.Room[] GetRoomList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/GetRoomList", ReplyAction="http://tempuri.org/IChatService/GetRoomListResponse")]
        System.Threading.Tasks.Task<WebChatUI.WebChatService.Room[]> GetRoomListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/GetUserList", ReplyAction="http://tempuri.org/IChatService/GetUserListResponse")]
        WebChatUI.WebChatService.User[] GetUserList(WebChatUI.WebChatService.Room room);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/GetUserList", ReplyAction="http://tempuri.org/IChatService/GetUserListResponse")]
        System.Threading.Tasks.Task<WebChatUI.WebChatService.User[]> GetUserListAsync(WebChatUI.WebChatService.Room room);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/GetUser", ReplyAction="http://tempuri.org/IChatService/GetUserResponse")]
        WebChatUI.WebChatService.User[] GetUser();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/GetUser", ReplyAction="http://tempuri.org/IChatService/GetUserResponse")]
        System.Threading.Tasks.Task<WebChatUI.WebChatService.User[]> GetUserAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/JoinRoom", ReplyAction="http://tempuri.org/IChatService/JoinRoomResponse")]
        WebChatUI.WebChatService.User[] JoinRoom(WebChatUI.WebChatService.Room room, WebChatUI.WebChatService.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/JoinRoom", ReplyAction="http://tempuri.org/IChatService/JoinRoomResponse")]
        System.Threading.Tasks.Task<WebChatUI.WebChatService.User[]> JoinRoomAsync(WebChatUI.WebChatService.Room room, WebChatUI.WebChatService.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/SendMessage", ReplyAction="http://tempuri.org/IChatService/SendMessageResponse")]
        bool SendMessage(WebChatUI.WebChatService.Message message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/SendMessage", ReplyAction="http://tempuri.org/IChatService/SendMessageResponse")]
        System.Threading.Tasks.Task<bool> SendMessageAsync(WebChatUI.WebChatService.Message message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/GetMessages", ReplyAction="http://tempuri.org/IChatService/GetMessagesResponse")]
        WebChatUI.WebChatService.Message[] GetMessages(WebChatUI.WebChatService.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/GetMessages", ReplyAction="http://tempuri.org/IChatService/GetMessagesResponse")]
        System.Threading.Tasks.Task<WebChatUI.WebChatService.Message[]> GetMessagesAsync(WebChatUI.WebChatService.User user);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IChatServiceChannel : WebChatUI.WebChatService.IChatService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ChatServiceClient : System.ServiceModel.ClientBase<WebChatUI.WebChatService.IChatService>, WebChatUI.WebChatService.IChatService {
        
        public ChatServiceClient() {
        }
        
        public ChatServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ChatServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ChatServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ChatServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public WebChatUI.WebChatService.User Login(WebChatUI.WebChatService.User user) {
            return base.Channel.Login(user);
        }
        
        public System.Threading.Tasks.Task<WebChatUI.WebChatService.User> LoginAsync(WebChatUI.WebChatService.User user) {
            return base.Channel.LoginAsync(user);
        }
        
        public WebChatUI.WebChatService.Room CreateRoom(WebChatUI.WebChatService.Room room) {
            return base.Channel.CreateRoom(room);
        }
        
        public System.Threading.Tasks.Task<WebChatUI.WebChatService.Room> CreateRoomAsync(WebChatUI.WebChatService.Room room) {
            return base.Channel.CreateRoomAsync(room);
        }
        
        public WebChatUI.WebChatService.Room[] GetRoomList() {
            return base.Channel.GetRoomList();
        }
        
        public System.Threading.Tasks.Task<WebChatUI.WebChatService.Room[]> GetRoomListAsync() {
            return base.Channel.GetRoomListAsync();
        }
        
        public WebChatUI.WebChatService.User[] GetUserList(WebChatUI.WebChatService.Room room) {
            return base.Channel.GetUserList(room);
        }
        
        public System.Threading.Tasks.Task<WebChatUI.WebChatService.User[]> GetUserListAsync(WebChatUI.WebChatService.Room room) {
            return base.Channel.GetUserListAsync(room);
        }
        
        public WebChatUI.WebChatService.User[] GetUser() {
            return base.Channel.GetUser();
        }
        
        public System.Threading.Tasks.Task<WebChatUI.WebChatService.User[]> GetUserAsync() {
            return base.Channel.GetUserAsync();
        }
        
        public WebChatUI.WebChatService.User[] JoinRoom(WebChatUI.WebChatService.Room room, WebChatUI.WebChatService.User user) {
            return base.Channel.JoinRoom(room, user);
        }
        
        public System.Threading.Tasks.Task<WebChatUI.WebChatService.User[]> JoinRoomAsync(WebChatUI.WebChatService.Room room, WebChatUI.WebChatService.User user) {
            return base.Channel.JoinRoomAsync(room, user);
        }
        
        public bool SendMessage(WebChatUI.WebChatService.Message message) {
            return base.Channel.SendMessage(message);
        }
        
        public System.Threading.Tasks.Task<bool> SendMessageAsync(WebChatUI.WebChatService.Message message) {
            return base.Channel.SendMessageAsync(message);
        }
        
        public WebChatUI.WebChatService.Message[] GetMessages(WebChatUI.WebChatService.User user) {
            return base.Channel.GetMessages(user);
        }
        
        public System.Threading.Tasks.Task<WebChatUI.WebChatService.Message[]> GetMessagesAsync(WebChatUI.WebChatService.User user) {
            return base.Channel.GetMessagesAsync(user);
        }
    }
}
